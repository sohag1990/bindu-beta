/*
Copyright Â© 2019 NAME HERE <EMAIL ADDRESS>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/bindu-bindu/bindu/cmd/helper"
	"github.com/gertd/go-pluralize"
	"github.com/manifoldco/promptui"
	"github.com/spf13/cobra"
)

// generateCmd represents the generate command
var generateCmd = &cobra.Command{
	Use:   "generate",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		helper.IsInProjectDir()
		// sanitize user args array
		args = helper.SanitizeUserInputReArry(args)
		// fmt.Printf("%v\n", args)

		genItems := []string{"Model", "Controller", "Scaffold", "View"}
		// fmt.Printf("%v", args)
		if len(args) == 0 {
			prompt := promptui.Select{
				Label: "Select To Generate",
				Items: genItems,
			}
			selectedIndex, _, err := prompt.Run()
			helper.ErrorCheck(err)
			args = append(args, genItems[selectedIndex])
			// fmt.Println("Item Selected: ", genItems[selectedIndex])
		}

		// check the first items is matched with predefined arg.. Controller, Model,,,etc
		i, found := helper.ArrayFind(genItems, args[0])
		if found {
			switch i {
			case 0:
				fmt.Printf("%v\n", "Model action")
				ModelGenerator(args)

			case 1:
				fmt.Printf("%v\n", "Controller action")
				ControllerGenerator(args)
			case 2:
				// fmt.Printf("%v\n", "Scaffold action")
				ModelGenerator(args)
				ControllerGenerator(args)
				RoutesGenerator(args)
			case 3:
				fmt.Printf("%v\n", "View action")
				fmt.Printf("%v\n", args)
			default:
				fmt.Printf("%v\n", "No action taken")
				fmt.Printf("%v\n", args)
			}

		}
	},
}

func init() {
	rootCmd.AddCommand(generateCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// generateCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// generateCmd.Flags().BoolP("controller", "c", false, "Help message for Generate controller")

	// generateCmd.Flags().StringP("controller", "c", "", "Enter new controller name")
}

// ModelGenerator to generate the model in project using the user inputs
func ModelGenerator(args []string) {
	// fmt.Println(args)

	fmt.Println("Initializing Model " + args[1])
	newpath := filepath.Join(".", "app/models")
	os.MkdirAll(newpath, os.ModePerm)
	f, err := os.Create("./app/models/" + args[1] + ".go")
	helper.ErrorCheck(err)
	f.WriteString("package models\n\n")
	f.WriteString("// " + args[1] + " public model generated by bindu\n")
	f.WriteString("type " + args[1] + " struct {\n")
	// Initialize Primary, CreatedAt, UpdatedAt, DeletedAt property
	f.WriteString("\tDefaultProperties\n")
	for _, prop := range args[2:] {
		f.WriteString("\t" + helper.PropertyFormatter(prop) + "\n")
	}
	f.WriteString("}")
	defer f.Close()
	absPath, _ := filepath.Abs(newpath)
	fmt.Println(absPath + "/" + args[1] + ".go")

}

// ControllerGenerator to generate the controller in project using the user inputs
func ControllerGenerator(args []string) {
	// fmt.Println(args)

	fmt.Println("Initializing Controller " + args[1])
	newpath := filepath.Join(".", "app/controllers")
	os.MkdirAll(newpath, os.ModePerm)
	// Model name
	plural := pluralize.NewClient()
	modelVar := strings.ToLower(args[1])
	modelVar2 := strings.ToLower(args[1]) + "2"
	f, err := os.Create("./app/controllers/" + args[1] + "Controller.go")
	helper.ErrorCheck(err)
	f.WriteString("package controllers\n\n")
	f.WriteString("import (\n\n")
	f.WriteString("\t\"github.com/gin-gonic/gin\"\n")
	f.WriteString("\t\"" + helper.GetEnvValueByKey(".env", "APP_IMPORT_PATH") + "/app/models\"\n")
	f.WriteString("\t\"" + helper.GetEnvValueByKey(".env", "APP_IMPORT_PATH") + "/db\"\n")
	f.WriteString(")\n\n")

	f.WriteString("// " + args[1] + " public controllers generated by bindu\n")
	// Generate CRUD
	// Get All Data for Index
	f.WriteString("func Index" + args[1] + "(c *gin.Context) {\n")
	// Controller functionality here
	// model collection initialize
	f.WriteString("\tpage := c.Params.ByName(\"page\")\n")
	f.WriteString("\tlimit := 10\n")
	f.WriteString("\tvar db = db.DB\n")

	f.WriteString("\tvar " + plural.Plural(modelVar) + " []models." + args[1] + "\n")
	f.WriteString("\tdb.Find(&" + plural.Plural(modelVar) + ").Offset(page).Limit(limit)\n\n")

	f.WriteString("\tc.JSON(200, " + plural.Plural(modelVar) + ")\n")
	f.WriteString("}\n\n")

	// Get Single Data for Show
	f.WriteString("func Show" + args[1] + "(c *gin.Context) {\n")
	// Controller functionality here
	f.WriteString("\tid := c.Params.ByName(\"id\")\n")
	f.WriteString("\tvar db = db.DB\n")
	f.WriteString("\tvar " + modelVar + " models." + args[1] + "\n")
	f.WriteString("\tdb.Where(\"id=?\",id).Find(&" + modelVar + ")\n\n")

	f.WriteString("\tc.JSON(200, " + modelVar + ")\n")
	f.WriteString("}\n\n")

	// Post Single Data for New
	f.WriteString("func Create" + args[1] + "(c *gin.Context) {\n")
	// Controller functionality here
	f.WriteString("\tvar db = db.DB\n")
	f.WriteString("\tvar " + modelVar + " models." + args[1] + "\n")
	f.WriteString("\tc.BindJSON(&" + modelVar + ")\n")
	f.WriteString("\tdb.Create(&" + modelVar + ")\n\n")

	f.WriteString("\tc.JSON(200, " + modelVar + ")\n")
	f.WriteString("}\n\n")

	// Post Single Data for Create
	f.WriteString("func New" + args[1] + "(c *gin.Context) {\n")
	// Controller functionality here
	f.WriteString("\tc.JSON(200, \"" + args[1] + " Create page\")\n")
	f.WriteString("}\n\n")

	// Create New Data for Update
	f.WriteString("func Update" + args[1] + "(c *gin.Context) {\n")
	// Controller functionality here
	f.WriteString("\tid := c.Params.ByName(\"id\")\n")
	f.WriteString("\tvar db = db.DB\n")
	f.WriteString("\tvar " + modelVar + " models." + args[1] + "\n")
	f.WriteString("\tvar " + modelVar2 + " models." + args[1] + "\n")
	f.WriteString("\tc.BindJSON(&" + modelVar + ")\n")

	f.WriteString("\tif err := db.Where(\"id=?\",id).Find(&" + modelVar2 + ").Error; err != nil {\n")
	f.WriteString("\tc.JSON(404, " + modelVar2 + ")\n")
	f.WriteString("return\n}\n\n")

	f.WriteString("\tdb.Model(&" + modelVar2 + ").Update(&" + modelVar + ")\n\n")

	f.WriteString("\tc.JSON(200, " + modelVar + ")\n")
	f.WriteString("}\n\n")

	// Get Single Data for Destroy
	f.WriteString("func Destroy" + args[1] + "(c *gin.Context) {\n")
	// Controller functionality here
	f.WriteString("\tid := c.Params.ByName(\"id\")\n")
	f.WriteString("\tvar db = db.DB\n")
	f.WriteString("\tvar " + modelVar + " models." + args[1] + "\n")

	f.WriteString("\tif err := db.Where(\"id=?\",id).Find(&" + modelVar + ").Error; err != nil {\n")
	f.WriteString("\tc.JSON(404, " + modelVar + ")\n")
	f.WriteString("return\n}\n\n")

	f.WriteString("\tdb.Delete(&" + modelVar + ")\n\n")

	f.WriteString("\tc.JSON(200, " + modelVar + ")\n")
	f.WriteString("}\n\n")

	defer f.Close()
	absPath, _ := filepath.Abs(newpath)
	fmt.Println(absPath + "/" + args[1] + "Controller.go\n")

}

// RoutesGenerator Routes generator
func RoutesGenerator(args []string) {
	// routes not working... it should do first, find the fucname and append lines before return
	helper.WriteRoutes("routes/API.go", args[1])
}
